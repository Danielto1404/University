import angr
from z3 import *
import regex

# v1 = dlopen("libs/verify0.so", 1);
#   verify0 = (__int64 (__fastcall *)(_QWORD, _QWORD))dlsym(v1, "verify0");
#   v102 = verify0(1337LL, input) & 1;
#   v2 = dlopen("libs/verify1.so", 1);
#   verify1 = (__int64 (__fastcall *)(_QWORD, _QWORD))dlsym(v2, "verify1");
#   v103 = (unsigned __int64)verify1(1337LL, input) & v102;
#   v3 = dlopen("libs/verify2.so", 1);
#   verify2 = (__int64 (__fastcall *)(_QWORD, _QWORD))dlsym(v3, "verify2");
#   v104 = (unsigned __int64)verify2(1337LL, input) & v103;
#   v4 = dlopen("libs/verify3.so", 1);
#   verify3 = (__int64 (__fastcall *)(_QWORD, _QWORD))dlsym(v4, "verify3");
#   v105 = (unsigned __int64)verify3(1337LL, input) & v104;
#   v5 = dlopen("libs/verify4.so", 1);
#   verify4 = (__int64 (__fastcall *)(_QWORD, _QWORD))dlsym(v5, "verify4");
#   v106 = (unsigned __int64)verify4(1337LL, input) & v105;
#   v6 = dlopen("libs/verify5.so", 1);
#   verify5 = (__int64 (__fastcall *)(_QWORD, _QWORD))dlsym(v6, "verify5");


c0 = BitVec('c0', 8)
c1 = BitVec('c1', 8)
c2 = BitVec('c2', 8)
c3 = BitVec('c3', 8)
c4 = BitVec('c4', 8)
c5 = BitVec('c5', 8)
c6 = BitVec('c6', 8)
c7 = BitVec('c7', 8)
c8 = BitVec('c8', 8)
c9 = BitVec('c9', 8)
c10 = BitVec('c10', 8)
c11 = BitVec('c11', 8)
c12 = BitVec('c12', 8)
c13 = BitVec('c13', 8)
c14 = BitVec('c14', 8)
c15 = BitVec('c15', 8)
c16 = BitVec('c16', 8)
c17 = BitVec('c17', 8)
c18 = BitVec('c18', 8)
c19 = BitVec('c19', 8)
c20 = BitVec('c20', 8)
c21 = BitVec('c21', 8)
c22 = BitVec('c22', 8)
c23 = BitVec('c23', 8)
c24 = BitVec('c24', 8)
c25 = BitVec('c25', 8)
c26 = BitVec('c26', 8)
c27 = BitVec('c27', 8)
c28 = BitVec('c28', 8)
c29 = BitVec('c29', 8)
c30 = BitVec('c30', 8)
c31 = BitVec('c31', 8)
c32 = BitVec('c32', 8)
c33 = BitVec('c33', 8)
c34 = BitVec('c34', 8)
c35 = BitVec('c35', 8)
c36 = BitVec('c36', 8)
c37 = BitVec('c37', 8)
c38 = BitVec('c38', 8)
c39 = BitVec('c39', 8)
c40 = BitVec('c40', 8)
c41 = BitVec('c41', 8)
c42 = BitVec('c42', 8)
c43 = BitVec('c43', 8)
c44 = BitVec('c44', 8)
c45 = BitVec('c45', 8)
c46 = BitVec('c46', 8)
c47 = BitVec('c47', 8)
c48 = BitVec('c48', 8)
c49 = BitVec('c49', 8)
c50 = BitVec('c50', 8)
c51 = BitVec('c51', 8)
c52 = BitVec('c52', 8)
c53 = BitVec('c53', 8)
c54 = BitVec('c54', 8)
c55 = BitVec('c55', 8)
c56 = BitVec('c56', 8)
c57 = BitVec('c57', 8)
c58 = BitVec('c58', 8)
c59 = BitVec('c59', 8)
c60 = BitVec('c60', 8)
c61 = BitVec('c61', 8)
c62 = BitVec('c62', 8)
c63 = BitVec('c63', 8)
c64 = BitVec('c64', 8)
c65 = BitVec('c65', 8)
c66 = BitVec('c66', 8)
c67 = BitVec('c67', 8)
c68 = BitVec('c68', 8)
c69 = BitVec('c69', 8)
c70 = BitVec('c70', 8)
c71 = BitVec('c71', 8)
c72 = BitVec('c72', 8)
c73 = BitVec('c73', 8)
c74 = BitVec('c74', 8)
c75 = BitVec('c75', 8)
c76 = BitVec('c76', 8)
c77 = BitVec('c77', 8)
c78 = BitVec('c78', 8)
c79 = BitVec('c79', 8)
c80 = BitVec('c80', 8)
c81 = BitVec('c81', 8)
c82 = BitVec('c82', 8)
c83 = BitVec('c83', 8)
c84 = BitVec('c84', 8)
c85 = BitVec('c85', 8)
c86 = BitVec('c86', 8)
c87 = BitVec('c87', 8)
c88 = BitVec('c88', 8)
c89 = BitVec('c89', 8)
c90 = BitVec('c90', 8)
c91 = BitVec('c91', 8)
c92 = BitVec('c92', 8)
c93 = BitVec('c93', 8)
c94 = BitVec('c94', 8)
c95 = BitVec('c95', 8)
c96 = BitVec('c96', 8)
c97 = BitVec('c97', 8)
c98 = BitVec('c98', 8)
c99 = BitVec('c99', 8)

solver = Solver()

solver.add(63 * ((65 * (c0 + 685)) ^ 0x1226A) == 7891254)
solver.add(13 * ((693 * (c1 + 703)) ^ 0x2CFC) == 7410715)
solver.add(43 * ((853 * (c2 + 382)) ^ 0x309A) == 17084158)
solver.add(45 * ((941 * (c3 + 168)) ^ 0x14DB9) == 7658910)
solver.add(75 * ((583 * (c4 + 212)) ^ 0x5B12) == 13246350)
solver.add(87 * ((159 * (c5 + 398)) ^ 0x1486B) == 2826369)
solver.add(19 * ((403 * (c6 + 372)) ^ 0x1138F) == 2610486)
solver.add(61 * ((21 * (c7 + 815)) ^ 0x23E1) == 1625467)
solver.add(61 * ((671 * (c8 + 51)) ^ 0x9EC0) == 4130737)
solver.add(29 * ((335 * (c9 + 396)) ^ 0x13DBD) == 7121240)
solver.add(81 * ((869 * (c10 + 622)) ^ 0xC1C0) == 50111703)
solver.add(51 * ((665 * (c11 + 180)) ^ 0xDFB4) == 12772899)
solver.add(65 * ((895 * (c12 + 189)) ^ 0xA573) == 13937495)
solver.add(81 * ((687 * (c13 + 286)) ^ 0xE15C) == 26218080)
solver.add(57 * ((325 * (c14 + 642)) ^ 0x131F2) == 11048538)
solver.add(61 * ((573 * (c15 + 100)) ^ 0xA839) == 4330634)
solver.add(21 * ((61 * (c16 + 609)) ^ 0x9976) == 279090)
solver.add(79 * ((593 * (c17 + 744)) ^ 0x6CC2) == 40172685)
solver.add(45 * ((943 * (c18 + 66)) ^ 0x125C8) == 10847160)
solver.add(23 * ((273 * (c19 + 640)) ^ 0x582E) == 4901599)
solver.add(79 * ((513 * (c20 + 815)) ^ 0x168FB) == 33479963)
solver.add(95 * ((407 * (c21 + 750)) ^ 0xCEF5) == 34311530)
solver.add(31 * ((795 * (c22 + 594)) ^ 0x10E41) == 13776617)
solver.add(49 * ((217 * (c23 + 938)) ^ 0x17FE0) == 6626270)
solver.add(55 * ((551 * (c24 + 711)) ^ 0x107DF) == 27949955)
solver.add(33 * ((587 * (c25 + 378)) ^ 0x14FA9) == 11109747)
solver.add(17 * ((495 * (c26 + 549)) ^ 0xD5EC) == 4714559)
solver.add(59 * ((701 * (c27 + 691)) ^ 0x12660) == 26284028)
solver.add(17 * ((727 * (c28 + 479)) ^ 0x5E14) == 7558506)
solver.add(57 * ((551 * (c29 + 259)) ^ 0x7176) == 9464280)
solver.add(51 * ((215 * (c30 + 298)) ^ 0x3162) == 4636053)
solver.add(23 * ((423 * (c31 + 922)) ^ 0xCCFF) == 9783004)
solver.add(47 * ((67 * (c32 + 388)) ^ 0x12E93) == 4054502)
solver.add(35 * ((407 * (c33 + 654)) ^ 0xFAEC) == 9747780)
solver.add(97 * ((253 * (c34 + 318)) ^ 0xE602) == 9338869)
solver.add(81 * ((773 * (c35 + 343)) ^ 0x152A3) == 23270571)
solver.add(87 * ((575 * (c36 + 65)) ^ 0x16CB3) == 5169888)
solver.add(99 * ((813 * (c37 + 488)) ^ 0x23D4) == 47217456)
solver.add(89 * ((683 * (c38 + 914)) ^ 0x245F) == 63727382)
solver.add(35 * ((429 * (c39 + 375)) ^ 0xB4C6) == 8380680)
solver.add(69 * ((883 * (c40 + 941)) ^ 0x98A2) == 66603837)
solver.add(49 * ((887 * (c41 + 726)) ^ 0xFD0F) == 33778101)
solver.add(37 * ((641 * (c42 + 782)) ^ 0x5D8B) == 21567411)
solver.add(15 * ((607 * (c43 + 293)) ^ 0xA27F) == 2981925)
solver.add(77 * ((295 * (c44 + 204)) ^ 0x7C6C) == 5773229)
solver.add(85 * ((631 * (c45 + 811)) ^ 0x10DD0) == 54480835)
solver.add(99 * ((21 * (c46 + 578)) ^ 0x13860) == 6491826)
solver.add(11 * ((597 * (c47 + 480)) ^ 0xA163) == 4237970)
solver.add(93 * ((97 * (c48 + 18)) ^ 0xC2DD) == 5690484)
solver.add(17 * ((793 * (c49 + 713)) ^ 0xCE46) == 10064782)
solver.add(91 * ((555 * (c50 + 528)) ^ 0x5242) == 30714138)
solver.add(25 * ((913 * (c51 + 291)) ^ 0x9C6B) == 8376400)
solver.add(101 * ((793 * (c52 + 694)) ^ 0xA1F2) == 63894216)
solver.add(93 * ((567 * (c53 + 422)) ^ 0xA426) == 24467184)
solver.add(63 * ((109 * (c54 + 78)) ^ 0xFA21) == 2895480)
solver.add(13 * ((793 * (c55 + 678)) ^ 0x5586) == 8353163)
solver.add(47 * ((423 * (c56 + 313)) ^ 0x11D5B) == 11885783)
solver.add(101 * ((539 * (c57 + 703)) ^ 0xF509) == 45360413)
solver.add(81 * ((131 * (c58 + 29)) ^ 0x12063) == 7512912)
solver.add(19 * ((335 * (c59 + 595)) ^ 0x1605D) == 3430469)
solver.add(69 * ((693 * (c60 + 34)) ^ 0x14C76) == 304911)
solver.add(57 * ((97 * (c61 + 711)) ^ 0x7CF6) == 4764744)
solver.add(27 * ((97 * (c62 + 437)) ^ 0x1204) == 1181412)
solver.add(83 * ((209 * (c63 + 105)) ^ 0x13DB) == 4042266)
solver.add(71 * ((59 * (c64 + 24)) ^ 0x148ED) == 6225351)
solver.add(71 * ((829 * (c65 + 983)) ^ 0x4D9C) == 64838478)
solver.add(91 * ((339 * (c66 + 375)) ^ 0x161BB) == 18406388)
solver.add(37 * ((823 * (c67 + 732)) ^ 0x1289) == 23879985)
solver.add(73 * ((159 * (c68 + 315)) ^ 0x733B) == 7050632)
solver.add(75 * ((775 * (c69 + 875)) ^ 0xC0B4) == 57603750)
solver.add(93 * ((515 * (c70 + 637)) ^ 0x1CB1) == 36340122)
solver.add(87 * ((831 * (c71 + 359)) ^ 0x17C3C) == 26432427)
solver.add(73 * ((21 * (c72 + 49)) ^ 0xECD) == 130305)
solver.add(59 * ((633 * (c73 + 772)) ^ 0x10A3) == 32132344)
solver.add(77 * ((679 * (c74 + 559)) ^ 0x82DE) == 32098451)
solver.add(99 * ((321 * (c75 + 488)) ^ 0x9017) == 15574878)
solver.add(85 * ((579 * (c76 + 560)) ^ 0x33AF) == 32200125)
solver.add(61 * ((855 * (c77 + 895)) ^ 0xEE31) == 55446804)
solver.add(65 * ((213 * (c78 + 597)) ^ 0x13994) == 12884560)
solver.add(61 * ((207 * (c79 + 735)) ^ 0x15A15) == 15746845)
solver.add(81 * ((959 * (c80 + 908)) ^ 0xD441) == 78895296)
solver.add(13 * ((473 * (c81 + 431)) ^ 0x15787) == 2224261)
solver.add(41 * ((897 * (c82 + 455)) ^ 0x3FEA) == 21468133)
solver.add(27 * ((93 * (c83 + 170)) ^ 0xE442) == 889812)
solver.add(17 * ((219 * (c84 + 240)) ^ 0x429C) == 811325)
solver.add(29 * ((375 * (c85 + 248)) ^ 0x93FB) == 4985709)
solver.add(87 * ((435 * (c86 + 631)) ^ 0x6592) == 26030661)
solver.add(81 * ((937 * (c87 + 128)) ^ 0x7C2E) == 20970495)
solver.add(95 * ((383 * (c88 + 770)) ^ 0x11B31) == 25418770)
solver.add(81 * ((201 * (c89 + 49)) ^ 0xD626) == 3376971)
solver.add(19 * ((315 * (c90 + 126)) ^ 0x1858E) == 747593)
solver.add(13 * ((611 * (c91 + 900)) ^ 0xE3EE) == 8268624)
solver.add(61 * ((795 * (c92 + 254)) ^ 0xE38) == 17485284)
solver.add(47 * ((265 * (c93 + 593)) ^ 0xEB7A) == 6857488)
solver.add(65 * ((997 * (c94 + 982)) ^ 0x1501B) == 72981350)
solver.add(65 * ((525 * (c95 + 220)) ^ 0xE726) == 9921275)
solver.add(49 * ((731 * (c96 + 281)) ^ 0x5490) == 12874407)
solver.add(71 * ((991 * (c97 + 615)) ^ 0x12288) == 47390299)
solver.add(67 * ((349 * (c98 + 999)) ^ 0xC9BE) == 23041434)
solver.add(41 * ((91 * (c99 + 695)) ^ 0x7FCD) == 3659865)


def get_result():
    solver.check()
    m = solver.model()

    var_names = [f"c{i}" for i in range(len(m))]

    res = ""
    for name in var_names:
        var_name = m[BitVec(name, 8)].as_string()
        res += chr(int(var_name))

    return res


conditions = [
    "13 * ((693 * (*(char *)(a2 + 1) + 703)) ^ 0x2CFC) == 7410715"
    , "43 * ((853 * (*(char *)(a2 + 2) + 382)) ^ 0x309A) == 17084158"
    , "45 * ((941 * (*(char *)(a2 + 3) + 168)) ^ 0x14DB9) == 7658910"
    , "75 * ((583 * (*(char *)(a2 + 4) + 212)) ^ 0x5B12) == 13246350"
    , "87 * ((159 * (*(char *)(a2 + 5) + 398)) ^ 0x1486B) == 2826369"
    , "19 * ((403 * (*(char *)(a2 + 6) + 372)) ^ 0x1138F) == 2610486"
    , "61 * ((21 * (*(char *)(a2 + 7) + 815)) ^ 0x23E1) == 1625467"
    , "61 * ((671 * (*(char *)(a2 + 8) + 51)) ^ 0x9EC0) == 4130737"
    , '29 * ((335 * (*(char *)(a2 + 9) + 396)) ^ 0x13DBD) == 7121240'
    , '81 * ((869 * (*(char *)(a2 + 10) + 622)) ^ 0xC1C0) == 50111703'
    , '51 * ((665 * (*(char *)(a2 + 11) + 180)) ^ 0xDFB4) == 12772899'
    , '65 * ((895 * (*(char *)(a2 + 12) + 189)) ^ 0xA573) == 13937495'
    , '81 * ((687 * (*(char *)(a2 + 13) + 286)) ^ 0xE15C) == 26218080'
    , '57 * ((325 * (*(char *)(a2 + 14) + 642)) ^ 0x131F2) == 11048538'
    , '61 * ((573 * (*(char *)(a2 + 15) + 100)) ^ 0xA839) == 4330634'
    , '21 * ((61 * (*(char *)(a2 + 16) + 609)) ^ 0x9976) == 279090'
    , '79 * ((593 * (*(char *)(a2 + 17) + 744)) ^ 0x6CC2) == 40172685'
    , '45 * ((943 * (*(char *)(a2 + 18) + 66)) ^ 0x125C8) == 10847160'
    , '23 * ((273 * (*(char *)(a2 + 19) + 640)) ^ 0x582E) == 4901599'
    , '79 * ((513 * (*(char *)(a2 + 20) + 815)) ^ 0x168FB) == 33479963'
    , '95 * ((407 * (*(char *)(a2 + 21) + 750)) ^ 0xCEF5) == 34311530'
    , '31 * ((795 * (*(char *)(a2 + 22) + 594)) ^ 0x10E41) == 13776617'
    , '49 * ((217 * (*(char *)(a2 + 23) + 938)) ^ 0x17FE0) == 6626270'
    , '55 * ((551 * (*(char *)(a2 + 24) + 711)) ^ 0x107DF) == 27949955'
    , '33 * ((587 * (*(char *)(a2 + 25) + 378)) ^ 0x14FA9) == 11109747'
    , '17 * ((495 * (*(char *)(a2 + 26) + 549)) ^ 0xD5EC) == 4714559'
    , '59 * ((701 * (*(char *)(a2 + 27) + 691)) ^ 0x12660) == 26284028'
    , '17 * ((727 * (*(char *)(a2 + 28) + 479)) ^ 0x5E14) == 7558506'
    , '57 * ((551 * (*(char *)(a2 + 29) + 259)) ^ 0x7176) == 9464280'
    , '51 * ((215 * (*(char *)(a2 + 30) + 298)) ^ 0x3162) == 4636053'
    , '23 * ((423 * (*(char *)(a2 + 31) + 922)) ^ 0xCCFF) == 9783004'
    , '47 * ((67 * (*(char *)(a2 + 32) + 388)) ^ 0x12E93) == 4054502'
    , '35 * ((407 * (*(char *)(a2 + 33) + 654)) ^ 0xFAEC) == 9747780'
    , '97 * ((253 * (*(char *)(a2 + 34) + 318)) ^ 0xE602) == 9338869'
    , '81 * ((773 * (*(char *)(a2 + 35) + 343)) ^ 0x152A3) == 23270571'
    , '87 * ((575 * (*(char *)(a2 + 36) + 65)) ^ 0x16CB3) == 5169888'
    , '99 * ((813 * (*(char *)(a2 + 37) + 488)) ^ 0x23D4) == 47217456'
    , '89 * ((683 * (*(char *)(a2 + 38) + 914)) ^ 0x245F) == 63727382'
    , '35 * ((429 * (*(char *)(a2 + 39) + 375)) ^ 0xB4C6) == 8380680'
    , '69 * ((883 * (*(char *)(a2 + 40) + 941)) ^ 0x98A2) == 66603837'
    , '49 * ((887 * (*(char *)(a2 + 41) + 726)) ^ 0xFD0F) == 33778101'
    , '37 * ((641 * (*(char *)(a2 + 42) + 782)) ^ 0x5D8B) == 21567411'
    , '15 * ((607 * (*(char *)(a2 + 43) + 293)) ^ 0xA27F) == 2981925'
    , '77 * ((295 * (*(char *)(a2 + 44) + 204)) ^ 0x7C6C) == 5773229'
    , '85 * ((631 * (*(char *)(a2 + 45) + 811)) ^ 0x10DD0) == 54480835'
    , '99 * ((21 * (*(char *)(a2 + 46) + 578)) ^ 0x13860) == 6491826'
    , '11 * ((597 * (*(char *)(a2 + 47) + 480)) ^ 0xA163) == 4237970'
    , '93 * ((97 * (*(char *)(a2 + 48) + 18)) ^ 0xC2DD) == 5690484'
    , '17 * ((793 * (*(char *)(a2 + 49) + 713)) ^ 0xCE46) == 10064782'
    , '91 * ((555 * (*(char *)(a2 + 50) + 528)) ^ 0x5242) == 30714138'
    , '25 * ((913 * (*(char *)(a2 + 51) + 291)) ^ 0x9C6B) == 8376400'
    , '101 * ((793 * (*(char *)(a2 + 52) + 694)) ^ 0xA1F2) == 63894216'
    , '93 * ((567 * (*(char *)(a2 + 53) + 422)) ^ 0xA426) == 24467184'
    , '63 * ((109 * (*(char *)(a2 + 54) + 78)) ^ 0xFA21) == 2895480'
    , '13 * ((793 * (*(char *)(a2 + 55) + 678)) ^ 0x5586) == 8353163'
    , '47 * ((423 * (*(char *)(a2 + 56) + 313)) ^ 0x11D5B) == 11885783'
    , '101 * ((539 * (*(char *)(a2 + 57) + 703)) ^ 0xF509) == 45360413'
    , '81 * ((131 * (*(char *)(a2 + 58) + 29)) ^ 0x12063) == 7512912'
    , '19 * ((335 * (*(char *)(a2 + 59) + 595)) ^ 0x1605D) == 3430469'
    , '69 * ((693 * (*(char *)(a2 + 60) + 34)) ^ 0x14C76) == 304911'
    , '57 * ((97 * (*(char *)(a2 + 61) + 711)) ^ 0x7CF6) == 4764744'
    , '27 * ((97 * (*(char *)(a2 + 62) + 437)) ^ 0x1204) == 1181412'
    , '83 * ((209 * (*(char *)(a2 + 63) + 105)) ^ 0x13DB) == 4042266'
    , '71 * ((59 * (*(char *)(a2 + 64) + 24)) ^ 0x148ED) == 6225351'
    , '71 * ((829 * (*(char *)(a2 + 65) + 983)) ^ 0x4D9C) == 64838478'
    , '91 * ((339 * (*(char *)(a2 + 66) + 375)) ^ 0x161BB) == 18406388'
    , '37 * ((823 * (*(char *)(a2 + 67) + 732)) ^ 0x1289) == 23879985'
    , '73 * ((159 * (*(char *)(a2 + 68) + 315)) ^ 0x733B) == 7050632'
    , '75 * ((775 * (*(char *)(a2 + 69) + 875)) ^ 0xC0B4) == 57603750'
    , '93 * ((515 * (*(char *)(a2 + 70) + 637)) ^ 0x1CB1) == 36340122'
    , '87 * ((831 * (*(char *)(a2 + 71) + 359)) ^ 0x17C3C) == 26432427'
    , '73 * ((21 * (*(char *)(a2 + 72) + 49)) ^ 0xECD) == 130305'
    , '59 * ((633 * (*(char *)(a2 + 73) + 772)) ^ 0x10A3) == 32132344'
    , '77 * ((679 * (*(char *)(a2 + 74) + 559)) ^ 0x82DE) == 32098451'
    , '99 * ((321 * (*(char *)(a2 + 75) + 488)) ^ 0x9017) == 15574878'
    , '85 * ((579 * (*(char *)(a2 + 76) + 560)) ^ 0x33AF) == 32200125'
    , '61 * ((855 * (*(char *)(a2 + 77) + 895)) ^ 0xEE31) == 55446804'
    , '65 * ((213 * (*(char *)(a2 + 78) + 597)) ^ 0x13994) == 12884560'
    , '61 * ((207 * (*(char *)(a2 + 79) + 735)) ^ 0x15A15) == 15746845'
    , '81 * ((959 * (*(char *)(a2 + 80) + 908)) ^ 0xD441) == 78895296'
    , '13 * ((473 * (*(char *)(a2 + 81) + 431)) ^ 0x15787) == 2224261'
    , '41 * ((897 * (*(char *)(a2 + 82) + 455)) ^ 0x3FEA) == 21468133'
    , '27 * ((93 * (*(char *)(a2 + 83) + 170)) ^ 0xE442) == 889812'
    , '17 * ((219 * (*(char *)(a2 + 84) + 240)) ^ 0x429C) == 811325'
    , '29 * ((375 * (*(char *)(a2 + 85) + 248)) ^ 0x93FB) == 4985709'
    , '87 * ((435 * (*(char *)(a2 + 86) + 631)) ^ 0x6592) == 26030661'
    , '81 * ((937 * (*(char *)(a2 + 87) + 128)) ^ 0x7C2E) == 20970495'
    , '95 * ((383 * (*(char *)(a2 + 88) + 770)) ^ 0x11B31) == 25418770'
    , '81 * ((201 * (*(char *)(a2 + 89) + 49)) ^ 0xD626) == 3376971'
    , '19 * ((315 * (*(char *)(a2 + 90) + 126)) ^ 0x1858E) == 747593'
    , '13 * ((611 * (*(char *)(a2 + 91) + 900)) ^ 0xE3EE) == 8268624'
    , '61 * ((795 * (*(char *)(a2 + 92) + 254)) ^ 0xE38) == 17485284'
    , '47 * ((265 * (*(char *)(a2 + 93) + 593)) ^ 0xEB7A) == 6857488'
    , '65 * ((997 * (*(char *)(a2 + 94) + 982)) ^ 0x1501B) == 72981350'
    , ' 65 * ((525 * (*(char *)(a2 + 95) + 220)) ^ 0xE726) == 9921275'
    , '49 * ((731 * (*(char *)(a2 + 96) + 281)) ^ 0x5490) == 12874407'
    , '71 * ((991 * (*(char *)(a2 + 97) + 615)) ^ 0x12288) == 47390299'
    , '67 * ((349 * (*(char *)(a2 + 98) + 999)) ^ 0xC9BE) == 23041434'
    , '41 * ((91 * (*(char *)(a2 + 99) + 695)) ^ 0x7FCD) == 3659865'

]


def transform_to_z3():
    pattern = r'(\*\(char \*\)\(a2 \+ (\d+)\))'
    transformed = map(lambda condition: regex.sub(pattern, r'c\2', condition), conditions)
    return list(map(lambda s: f"solver.add({s})", transformed))


def gen_vars():
    for i in range(100):
        print(f"c{i} = BitVec('c{i}', 8)")


def gen_z3():
    for z3_cond in transform_to_z3():
        print(z3_cond)


print(get_result())

flag = b'spbctf{oh_my_fvcking_g0d_th1s_is_really_l0ng_flag_th4t_su1ts_w3ll_f0r_th3_hurt_m3_pl3nty_difficulty}'
